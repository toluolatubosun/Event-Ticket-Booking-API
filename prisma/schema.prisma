// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String                   @id @default(cuid(2))
  role                   UserRoles                @default(USER)
  name                   String?                  @db.VarChar(255)
  email                  String                   @unique
  password               String                   @db.Text
  updated_at             DateTime                 @updatedAt
  created_at             DateTime                 @default(now())
  tokens                 Token[]
  events                 Event[]
  event_tickets          EventTicket[]
  Notification           Notification[]
  EventTicketWaitingList EventTicketWaitingList[]

  @@map("users")
}

model Token {
  id         String     @id @default(cuid(2))
  type       TokenTypes
  token      String     @db.Text
  user_id    String     @db.VarChar(255)
  user       User       @relation(fields: [user_id], references: [id])
  updated_at DateTime   @updatedAt
  created_at DateTime   @default(now())

  @@map("tokens")
}

model Event {
  id                        String                   @id @default(cuid(2))
  title                     String                   @db.VarChar(255)
  location                  String                   @db.Text
  description               String                   @db.Text
  end_date_time             DateTime
  start_date_time           DateTime
  total_tickets             Int
  available_tickets         Int
  user_id                   String                   @db.VarChar(255)
  user                      User                     @relation(fields: [user_id], references: [id])
  updated_at                DateTime                 @updatedAt
  created_at                DateTime                 @default(now())
  event_tickets             EventTicket[]
  event_ticket_waiting_list EventTicketWaitingList[]

  @@map("events")
}

model EventTicket {
  id         String   @id @default(cuid(2))
  event_id   String   @db.VarChar(255)
  event      Event    @relation(fields: [event_id], references: [id])
  user_id    String   @db.VarChar(255)
  user       User     @relation(fields: [user_id], references: [id])
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@map("event_tickets")
}

model EventTicketWaitingList {
  id         String   @id @default(cuid(2))
  event_id   String   @db.VarChar(255)
  event      Event    @relation(fields: [event_id], references: [id])
  user_id    String   @db.VarChar(255)
  user       User     @relation(fields: [user_id], references: [id])
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@map("event_tickets_waiting_list")
}

model Notification {
  id         String   @id @default(cuid(2))
  user_id    String   @db.VarChar(255)
  user       User     @relation(fields: [user_id], references: [id])
  message    String   @db.Text
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@map("notifications")
}

enum UserRoles {
  USER
}

enum TokenTypes {
  REFRESH
}
